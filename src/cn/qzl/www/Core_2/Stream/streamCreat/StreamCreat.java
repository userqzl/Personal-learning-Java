package cn.qzl.www.Core_2.Stream.streamCreat;import java.io.IOException;import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;/** * @Author qzl * @Description * * 流的创建 * @Since 2020-05-18 22:11 */public class StreamCreat {    //打印流    public static <T> void show(String title, Stream<T> stream){        //打印前十个数据        final int SIZE = 10;        List<T> firstElements = stream                .limit(SIZE + 1)                .collect(Collectors.toList());        System.out.print(title+": ");        for (int i = 0; i < firstElements.size(); i++) {            if(i > 0) System.out.print(", ");            if(i < SIZE) System.out.print(firstElements.get(i));            else System.out.println("...");        }        System.out.println();    }    public static void main(String[] args) throws IOException {        Path path = Paths.get("D:\\Java\\code\\练习\\src\\cn\\qzl\\www\\Core_2\\Stream\\streamCreat\\Test.txt");        String contents = new String(Files.readAllBytes(path),                StandardCharsets.UTF_8);        // Stream.of()方法创建给定值的流        System.out.println("-----------Stream.of()方法创建给定值的流-------------");        Stream<String> words = Stream.of(contents.split("\\PL"));        show("words",words);        Stream<String> song = Stream.of("gently","haha","xiaoMing","the","is");        show("song",song);        //创建不包含任何数据的流        System.out.println("--------------创建不包含任何数据的流------------------");        Stream<String> emptys = Stream.empty();        show("空流",emptys);        //无限流        System.out.println("--------------创建无限流------------------");        Stream<String> echo = Stream.generate(()->"echo");        show("无限流",echo);        Stream<Double> randoms = Stream.generate(Math::random);        show("无限随机数流",randoms);        Stream<BigInteger> integers = Stream.iterate(BigInteger.ONE,                n->n.add(BigInteger.ONE));        show("无限有序序列流", integers);    }}