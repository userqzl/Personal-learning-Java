package cn.qzl.www.Excetion_14.ThreadSyn;import java.util.Random;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;/** * @Author qzl * @Description * 可以简单的将方法声明为synchronized * @Since 2020-05-07 10:36 */public class SynTest implements Runnable{    private int []account = {1000,2000,3000,1200,800};    Random random = new Random();    @Override    public void run(){        while(true){            transfer();        }    }    //转账    public synchronized void transfer(){        int r = random.nextInt(100);   //转出金额        int acc_1 = random.nextInt(5);  //自己账户        int acc_2 = random.nextInt(5);  //他人账户        if(account[acc_1] > 1000) r+=500;        //转账方和收款方都是自己，重新随机收款方        while(acc_1 == acc_2) acc_2 = random.nextInt(5);        for(int i = 0;i < 5;++i){            //如果某个账户余额不足100，下次转账给它            if(account[i] < 100) acc_2 = i;        }        try{            //余额不足            while(account[acc_1]<r) {                    wait();    //进入等待集阻塞            }            //开始转账            account[acc_1] -= r;            account[acc_2] += r;            notifyAll();   //解除等待集中的阻塞            System.out.println("---------------------------------------------");            System.out.println(Thread.currentThread().getName()+"-->账户["+acc_1+"]向账户["+acc_2+"]转账"+r+"元");            int i = 0;            for(int a:account){                System.out.println(Thread.currentThread().getName()+"-->账户["+ i++ +"]余额"+a);            }            int sum = account[0]+account[1]+account[2]+account[3]+account[4];            System.out.println("总余额为："+sum);            System.out.println("---------------------------------------------");        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            try {                Thread.sleep(random.nextInt(1000));            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void main(String[] args) {        SynTest c = new SynTest();        Thread t1 = new Thread(c);        Thread t2 = new Thread(c);        Thread t3 = new Thread(c);        t1.start();        t2.start();        t3.start();    }}